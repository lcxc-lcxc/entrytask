

syntax = "proto3";

option go_package = "./pb";


service UserService{
  rpc Register(RegisterRequest)returns(RegisterReply){}
  rpc Login(LoginRequest)returns(LoginReply){}
  rpc Auth(AuthRequest) returns (AuthReply){}

}


message RegisterRequest {
  string username = 1;
  string password = 2;
}

message RegisterReply{
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginReply{
  string username = 1;
  string session_id = 2;
}

message AuthRequest{
  string session_id = 1;
}
message AuthReply{
  int64 ID = 1;
  string username = 2;
}


// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative internel/proto/user.proto
// go_out 代表要输出到的目录
// source_relative代表按原来的目录结构输出，比如：
//        message/message.proto和hello/hello.proto就会在go_out指定的目录下生成
//        message/message.pb.go和hello/hello.pb.go
//